;;; RSA crypto algorithm in miniKanren + CLP(SMT)

;; Examples taken from http://doctrina.org/How-RSA-Works-With-Examples.html

(load "mk.scm")
(load "z3-driver.scm")
(load "full-interp-with-let.scm")
(load "test-check.scm")

;; test 'let' extension to evalo
(test "evalo-let-1"
   (run* (q)
     (evalo `(let ((y 5))
               y)            
            q))
   '(5))

(test "evalo-let-2"
   (run* (q)
     (evalo `(let ((y 5)
                   (z 6))
               z)
            q))
   '(6))

(test "evalo-let-3"
   (run* (q)
     (evalo `(let ((y 5)
                   (z 6))
               (* y z))
            q))
   '(30))

(test "evalo-let-4"
   (run* (q)
     (evalo `(let ((y 5)
                   (z 6))
               (list y z))
            q))
   '((5 6)))

(test "evalo-let-5"
  (run* (q)
    (evalo `(let ((y (+ 2 3))
                  (z (* 4 4)))
              (list y z))
           q))
  '((5 16)))


;;; RSA time!

;; n = p * q, where p and q are given
(time
 (test "evalo-rsa-mult-1"
   (run* (k)
     (evalo `(let ((p 12131072439211271897323671531612440428472427633701410925634549312301964373042085619324197365322416866541017057361365214171711713797974299334871062829803541)
                   (q 12027524255478748885956220793734512128733387803682075433653899983955179850988797899869146900809131611153346817050832096022160146366346391812470987105415233))
               (let ((n (* p q)))
                 n))            
            k))
   '(145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053)))


;; n = p * q, where p and n are given
(time
 (test "evalo-rsa-mult-1-backwards"
   (run* (k)
     (evalo `(let ((p 12131072439211271897323671531612440428472427633701410925634549312301964373042085619324197365322416866541017057361365214171711713797974299334871062829803541)
                   (q 12027524255478748885956220793734512128733387803682075433653899983955179850988797899869146900809131611153346817050832096022160146366346391812470987105415233))
               (let ((n (* p ',k))) ;; dont forget the quote!
                 n))
            145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053))
   '(12027524255478748885956220793734512128733387803682075433653899983955179850988797899869146900809131611153346817050832096022160146366346391812470987105415233)))


(time
 (test "evalo-rsa-mult-2"
   (run* (k)
     (evalo `(let ((p 12131072439211271897323671531612440428472427633701410925634549312301964373042085619324197365322416866541017057361365214171711713797974299334871062829803541)
                   (q 12027524255478748885956220793734512128733387803682075433653899983955179850988797899869146900809131611153346817050832096022160146366346391812470987105415233))
               (let ((n (* p q))
                     (phi (* (- p 1) (- q 1))))
                 (list n phi)))
            k))
   '((145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053
      145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889648313811232279966317301397777852365301547848273478871297222058587457152891606459269718119268971163555070802643999529549644116811947516513938184296683521280))))

(time
 (test "evalo-rsa-mult-3"
   (run* (k)
     (evalo `(let ((p 12131072439211271897323671531612440428472427633701410925634549312301964373042085619324197365322416866541017057361365214171711713797974299334871062829803541)
                   (q 12027524255478748885956220793734512128733387803682075433653899983955179850988797899869146900809131611153346817050832096022160146366346391812470987105415233))
               (let ((n (* p q))
                     (phi (* (- p 1) (- q 1))))
                 (let ((e 65537))
                   (let ((public-key (cons e n)))
                     (list n phi public-key)))))
            k))
   '((145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053
      145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889648313811232279966317301397777852365301547848273478871297222058587457152891606459269718119268971163555070802643999529549644116811947516513938184296683521280
      (65537 . 145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053)))))



#!eof

(time
 (test "evalo-backwards-fac-quoted-6"
   (run* (q)
     (evalo `(letrec ((fac
                       (lambda (n)
                         (if (< n 0) #f
                             (if (= n 0) 1
                                 (* n (fac (- n 1))))))))
               (fac ',q))
            720))
   '(6)))
